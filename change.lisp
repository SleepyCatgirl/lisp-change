(defstruct coins
  "A basic structure that holds each bill"
  (1000c 0)
  (500c 0)
  (250c 0)
  (100c 0)
  (50c 0)
  (25c 0)
  (10c 0)
  (5c 0)
  (2c 0)
  (1c 0))
(defun add-bill (change bill-struct)
  "Function that will make change, and change specific structure based on that"
  (cond ((>= change 1000) (incf (coins-1000c bill-struct))
         (add-bill (- change 1000) bill-struct))
        ((>= change 500) (incf (coins-500c bill-struct))
         (add-bill (- change 500) bill-struct))
        ((>= change 250) (incf (coins-250c bill-struct))
         (add-bill (- change 250) bill-struct))
        ((>= change 100) (incf (coins-100c bill-struct))
         (add-bill (- change 100) bill-struct))
        ((>= change 50) (incf (coins-50c bill-struct))
         (add-bill (- change 50) bill-struct))
        ((>= change 25) (incf (coins-25c bill-struct))
         (add-bill (- change 25) bill-struct))
        ((>= change 10) (incf (coins-10c bill-struct))
         (add-bill (- change 10) bill-struct))
        ((>= change 5) (incf (coins-5c bill-struct))
         (add-bill (- change 5) bill-struct))
        ((>= change 2) (incf (coins-2c bill-struct))
         (add-bill (- change 2) bill-struct))
        ((>= change 1) (incf (coins-1c bill-struct))
         (add-bill (- change 1) bill-struct))
        (t nil)))

(defun print-bills (bill-struct)
  "Print said structure"
  (let ((1000c (coins-1000c bill-struct))
        (500c (coins-500c bill-struct))
        (250c (coins-250c bill-struct))
        (100c (coins-100c bill-struct))
        (50c (coins-50c bill-struct))
        (25c (coins-25c bill-struct))
        (10c (coins-10c bill-struct))
        (5c (coins-5c bill-struct))
        (2c (coins-2c bill-struct))
        (1c (coins-1c bill-struct)))
    (format t "~&1000c Bills: ~S" 1000c)
    (format t "~&500c Bills: ~S" 500c)
    (format t "~&250c Bills: ~S" 250c)
    (format t "~&100c Bills: ~S" 100c)
    (format t "~&50c Bills: ~S" 50c)
    (format t "~&25c Bills: ~S" 25c)
    (format t "~&10c Bills: ~S" 10c)
    (format t "~&5c Bills: ~S" 5c)
    (format t "~&2c Bills: ~S" 2c)
    (format t "~&1c Bills: ~S" 1c)))

(defun ask-purchase ()
  "Final function, that asks for spent money, how much is paid,
   and it returns change, and how many specific bills"
  (format t "~&How much did you spend?~&")
  (let ((spent-money (read)))
    (format t "~&How much do you pay?~&")
    (let* ((paid-money (read))
          (change (- paid-money spent-money))
          (bills (make-coins)))
      (cond ((< change 0) (format t "~&Not enough money"))
            ((= change 0) (format t "~&No change"))
            (t
             (add-bill change bills)
             (format t "~&Change: ~S~&" change)
             (print-bills bills))))))
